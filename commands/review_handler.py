import os
import discord
from discord.ext import commands
from datetime import datetime, timedelta
from ggs_handler import record_review, record_comment, update_user_exp, XP_PER_REVIEW

class ReviewHandler(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.REVIEW_CHANNEL_ID = int(os.getenv("REVIEW_CHANNEL_ID"))
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏Ç‡∏≠‡∏á user ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ thread ‡∏ñ‡∏π‡∏Å‡∏ô‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        self.processed_comments: dict[int, set[int]] = {}
        # ‡∏ä‡πà‡∏ß‡∏¢‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏™‡πÅ‡∏õ‡∏° ‡πÅ‡∏ï‡πà‡∏•‡∏∞ user ‡∏ï‡πà‡∏≠ thread ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        self.spam_protect: dict[tuple[int,int], datetime] = {}

    @commands.Cog.listener()
    async def on_thread_create(self, thread: discord.Thread):
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å intro ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏° (‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á)
        if thread.parent_id != self.REVIEW_CHANNEL_ID:
            return
        # ... (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á on_thread_create) ...

    @commands.Cog.listener()
    async def on_message(self, message: discord.Message):
        # ‡πÅ‡∏¢‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô Thread ‡∏Ç‡∏≠‡∏á Review Channel
        if message.author.bot:
            return
        ch = message.channel
        if not (isinstance(ch, discord.Thread) and ch.parent_id == self.REVIEW_CHANNEL_ID):
            return
        # ‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° starter (id ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö thread id)
        if message.id == ch.id:
            return

        user_id = message.author.id
        thread_id = ch.id
        key = (thread_id, user_id)
        now = datetime.utcnow()
        # spam protection 60 ‡∏ß‡∏¥
        last = self.spam_protect.get(key)
        if last and (now - last) < timedelta(seconds=60):
            return
        self.spam_protect[key] = now

        # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏ô‡∏±‡∏ö‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏Ç‡∏≠‡∏á user ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô thread ‡∏ô‡∏µ‡πâ
        if thread_id not in self.processed_comments:
            self.processed_comments[thread_id] = set()
        if user_id in self.processed_comments[thread_id]:
            return

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏•‡∏á Google Sheets
        title     = ch.name
        content   = message.content
        author    = str(message.author)
        timestamp = now.strftime("%Y-%m-%d %H:%M:%S")
        record_comment(title, content, author, timestamp)

        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï XP ‡πÅ‡∏•‡∏∞ Level
        new_xp, new_level, leveled_up = update_user_exp(author)
        self.processed_comments[thread_id].add(user_id)

        # ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏ô thread
        reply = (
            f"{message.author.mention} ‚úÖ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö {XP_PER_REVIEW} XP (‡∏£‡∏ß‡∏° {new_xp} XP), Level: {new_level}"
        )
        if leveled_up:
            reply += f" üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô Level {new_level} ‡πÅ‡∏•‡πâ‡∏ß"
        await ch.send(reply)

async def setup(bot: commands.Bot):
    await bot.add_cog(ReviewHandler(bot))